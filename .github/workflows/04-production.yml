# –®–∞–≥ 4: Production-ready pipeline
# –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É jobs, –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, 
# —Ä–∞–±–æ—Ç—É —Å Docker –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏

name: 04 - Production CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ–≥–æ workflow
env:
  PYTHON_VERSION: '3.11'
  DOCKER_IMAGE_NAME: calculator-api

jobs:
  # Job 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
        run: |
          pip install flake8 black isort pylint
      
      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (black)
        run: black --check app/ tests/
        continue-on-error: true
      
      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ (isort)
        run: isort --check-only app/ tests/
        continue-on-error: true
      
      - name: –õ–∏–Ω—Ç–µ—Ä (flake8)
        run: flake8 app/ tests/ --max-line-length=127
        continue-on-error: true
  
  # Job 2: Unit —Ç–µ—Å—Ç—ã
  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        run: |
          pip install -r requirements.txt
      
      - name: –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤
        run: |
          pytest tests/test_calculator.py -v --junitxml=test-results/unit-tests.xml
      
      - name: –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: test-results/
  
  # Job 3: Integration —Ç–µ—Å—Ç—ã (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å unit)
  integration-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        run: |
          pip install -r requirements.txt
      
      - name: –ó–∞–ø—É—Å–∫ integration —Ç–µ—Å—Ç–æ–≤
        run: |
          pytest tests/test_api.py -v --junitxml=test-results/integration-tests.xml
      
      - name: –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: test-results/
  
  # Job 4: –¢–µ—Å—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö)
  coverage:
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        run: |
          pip install -r requirements.txt
      
      - name: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
        run: |
          pytest tests/ --cov=app --cov-report=html --cov-report=xml --cov-report=term
      
      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
        run: |
          coverage report --fail-under=80
      
      - name: –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            htmlcov/
            coverage.xml
  
  # Job 5: –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ—Å—Ç–æ–≤)
  build-docker:
    needs: [code-quality, unit-tests, integration-tests]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: –¢–µ—Å—Ç Docker –æ–±—Ä–∞–∑–∞
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:test .
          docker run -d -p 5000:5000 --name test-container ${{ env.DOCKER_IMAGE_NAME }}:test
          sleep 5
          curl -f http://localhost:5000/health || exit 1
          docker stop test-container
  
  # Job 6: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–µ–ø–ª–æ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏)
  deploy-check:
    needs: [coverage, build-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        uses: actions/download-artifact@v4
      
      - name: –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        run: |
          echo "–°–æ–±—Ä–∞–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:"
          ls -R
      
      - name: –î–µ–ø–ª–æ–π (–∑–∞–≥–ª—É—à–∫–∞)
        run: |
          echo "üöÄ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!"
          echo "üì¶ –ú–æ–∂–Ω–æ –¥–µ–ø–ª–æ–∏—Ç—å –Ω–∞ production"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
